Notes
=====
• Python's PRNG didn't work
• Copied binary to the shell server for debugging, and noticed that time() was off by 15 seconds on my machine
• Aligned time correctly, then noticed that rand() was not as random locally as it is remotely
• Tried random.randint() - didn't work. Tried C's rand() - no dice. Tried POSIX C's random() - ta daaaa!
• Meshed C and pwntools to create a really hacky (but working) solution script, and got the flag :P

Flag
====
picoCTF{pseudo_random_number_generator_not_so_random_24ce919be49576c7df453a4a3e6fbd40}

Addresses
=========
• 0x510 <printf@plt>
• 0x520 <fflush@plt>
• 0x530 <time@plt>
• 0x540 <puts@plt>
• 0x550 <system@plt>
• 0x560 <exit@plt>
• 0x570 <srand@plt>
• 0x590 <rand@plt>
• 0x5a0 <__isoc99_scanf@plt>


int get_flag() {
    __x86.get_pc_thunk.bx();
    puts_plt()();
    system_plt()();
    puts_plt()();
    eax = fflush_plt()();
    return eax;
}

int main(int arg0) {
    ebp = &stack[-8];
    __x86.get_pc_thunk.bx();
    puts_plt()();
    puts_plt()();
    puts_plt()();
    puts_plt()();
    puts_plt()();
    puts_plt()();
    puts_plt()();
    puts_plt()();
    puts_plt()();
    puts_plt()();
    puts_plt()();
    puts_plt()();
    puts_plt()();
    puts_plt()();
    fflush_plt()();
    *(ebp - 0x10) = time_plt()();
    srand_plt()();
    esp = (esp & 0xfffffff0) - 0x20;
    for (i = 1; i < 31; i++) {
            printf_plt();
            puts_plt()();
            *(ebp - 0x14) = rand_plt()() & 0xf;
            printf_plt();
            fflush_plt()();
            scanf_plt();
            fflush_plt()();
            if (*(ebp - 0x14) != *(ebp - 0x18)) {
                    puts_plt()();
                    fflush_plt()();
                    esp = ((esp - 0x10) + 0x10 - 0x10) + 0x10 - 0x10;
                    exit_plt()();
            }
    }
    puts_plt()();
    get_flag();
    fflush_plt()();
    return 0x0;
}